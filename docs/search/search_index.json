{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home FalconCV is an open-source Python library that offers developers an interface to interact with some of the most popular computer vision frameworks, such as TensorFlow Object detection API and Detectron. The main objective behind it is to unify the set of tools available and simplify the use of them. This library is focused mainly on Computer Vision practitioners but also is flexible enough to allow researchers to configure the models at a low-level. Additionally, taking advantage of the fantastic features that OpenVINO offers, a custom model can be trained and optimized to run efficiently in the target hardware with just a few lines of code. It is important to say that FalconCV does not attempt to replace any of the tools mentioned previously; instead, it takes the best of them and offers a solution to improve accessibility to new users. Warning This is a pre-release version of the FalconCV, which is still undergoing final testing before its official release. The website, its software and all content found on it are provided on an \"as is\" and \"as available\" basis. We hope to release an stable version soon. Another consideration is that FalconCV is compatible only with TensorFlow 1.x for now. Install FalconCV from GitHub source Create environment Download and install Anaconda (Python 3+). Open the anaconda terminal and execute: 1 conda create --name falconcv python=3.6 Install dependencies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 pip install matplotlib pip install numpy==1.17 pip install opencv-contrib-python pip install pillow pip install cython pip install tqdm pip install scipy pip install requests pip install clint pip install validators pip install more-itertools pip install pandas pip install imutils pip install boto3 pip install \"dask[complete]\" pip install lxml pip install Mako pip install colorlog pip install colorama pip install bs4 pip install pick pip install -U scikit-learn pip install gitpython Linux 1 2 3 conda install -c anaconda wxpython sudo apt install protobuf-compiler pip install pycocotools Windows 1 2 3 pip install wmi pip install windows-curses pip install pycocotools-win Install backends TensorFlow: 1 conda install tensorflow-gpu==1.15.0 Install FalconCV from PyPi (test) 1 pip install -i https://test.pypi.org/simple/ falconcv","title":"Home"},{"location":"#home","text":"FalconCV is an open-source Python library that offers developers an interface to interact with some of the most popular computer vision frameworks, such as TensorFlow Object detection API and Detectron. The main objective behind it is to unify the set of tools available and simplify the use of them. This library is focused mainly on Computer Vision practitioners but also is flexible enough to allow researchers to configure the models at a low-level. Additionally, taking advantage of the fantastic features that OpenVINO offers, a custom model can be trained and optimized to run efficiently in the target hardware with just a few lines of code. It is important to say that FalconCV does not attempt to replace any of the tools mentioned previously; instead, it takes the best of them and offers a solution to improve accessibility to new users. Warning This is a pre-release version of the FalconCV, which is still undergoing final testing before its official release. The website, its software and all content found on it are provided on an \"as is\" and \"as available\" basis. We hope to release an stable version soon. Another consideration is that FalconCV is compatible only with TensorFlow 1.x for now.","title":"Home"},{"location":"#install-falconcv-from-github-source","text":"","title":"Install FalconCV from GitHub source"},{"location":"#create-environment","text":"Download and install Anaconda (Python 3+). Open the anaconda terminal and execute: 1 conda create --name falconcv python=3.6","title":"Create environment"},{"location":"#install-dependencies","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 pip install matplotlib pip install numpy==1.17 pip install opencv-contrib-python pip install pillow pip install cython pip install tqdm pip install scipy pip install requests pip install clint pip install validators pip install more-itertools pip install pandas pip install imutils pip install boto3 pip install \"dask[complete]\" pip install lxml pip install Mako pip install colorlog pip install colorama pip install bs4 pip install pick pip install -U scikit-learn pip install gitpython Linux 1 2 3 conda install -c anaconda wxpython sudo apt install protobuf-compiler pip install pycocotools Windows 1 2 3 pip install wmi pip install windows-curses pip install pycocotools-win","title":"Install dependencies"},{"location":"#install-backends","text":"TensorFlow: 1 conda install tensorflow-gpu==1.15.0","title":"Install backends"},{"location":"#install-falconcv-from-pypi-test","text":"1 pip install -i https://test.pypi.org/simple/ falconcv","title":"Install FalconCV from PyPi (test)"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"datasets/","text":"Datasets OpenImages Open Images is a dataset of ~9M images annotated with image-level labels, object bounding boxes, object segmentation masks, visual relationships, and localized narratives. It contains a total of 16M bounding boxes for 600 object classes on 1.9M images, making it the largest existing dataset with object location annotations. The boxes have been largely manually drawn by professional annotators to ensure accuracy and consistency. 1 Open Images 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from falconcv.ds import * if __name__ == '__main__' : # creating dataset dataset = OpenImages ( v = 6 ) #5/6 supported dataset . setup ( split = \"train\" , task = \"detection\" ) #labels = dataset.labels_map.values() # get valid labels images_folder = \"<output folder>\" for batch_images in dataset . fetch ( n = 100 , # number of images by class labels = [ \"Mouse\" , \"dog\" ], # target labels batch_size = 50 # batch images size ): # Do something cool with the images for img in batch_images : # export images to disk img . export ( images_folder ) for region in img . regions : print ( region . shape_attributes [ \"x\" ], region . shape_attributes [ \"y\" ]) Cocos COCO is a large-scale object detection, segmentation, and captioning dataset. COCO has several features: Object segmentation, Recognition in context, Superpixel stuff segmentation, 330K images (>200K labeled) 2 COCO (Common Objects in Context) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from falconcv.ds import * if __name__ == '__main__' : # creating dataset dataset = Coco ( v = 2017 ) #Only 2017 supported dataset . setup ( split = \"train\" , task = \"detection\" ) #labels = dataset.labels_map.values() # get valid labels images_folder = \"<output folder>\" for batch_images in dataset . fetch ( n = 100 , # number of images by class labels = [ \"Mouse\" , \"dog\" ], # target labels batch_size = 50 # batch images size ): # Do something cool with the images for img in batch_images : # export images to disk img . export ( images_folder ) for region in img . regions : print ( region . shape_attributes [ \"x\" ], region . shape_attributes [ \"y\" ]) Scrapper - Using the falconCV scrapper you can download images from bing and flicker Bing Images Scrapper Info How to generate the subscription key? https://azure.microsoft.com/en-us/try/cognitive-services/my-apis/?api=search-api-v7 Download images from bing 1 2 3 4 5 6 7 8 9 10 from falconcv.ds import * import uuid , os import cv2 if __name__ == '__main__' : out_folder = \"<out folder>\" scrapper = BingScrapper ( \"<Subscription Key>\" ) for images_batch in scrapper . fetch ( q = \"cockroach\" , batch_size = 80 ): for img in images_batch : # copy the images to the disk or do whatever you want cv2 . imwrite ( os . path . join ( out_folder , \" {} .jpg\" . format ( str ( uuid . uuid4 ()))), img ) Flickr Images Scrapper Info how to generate the api key?? https://www.flickr.com/services/api/misc.api_keys.html Download images from Flickr 1 2 3 4 5 6 7 8 9 10 from falconcv.ds import * import uuid , os import cv2 if __name__ == '__main__' : out_folder = r \"<out folder>\" scrapper = FlickrScrapper ( api_key = \"<Api Key>\" ) for batch in scrapper . fetch ( q = [ \"cockroach\" ], batch_size = 80 ): for img in batch : # copy the images to the disk or do whatever you want cv2 . imwrite ( os . path . join ( out_folder , \" {} .jpg\" . format ( str ( uuid . uuid4 ()))), img ) https://github.com/openimages/dataset \u21a9 http://cocodataset.org/ \u21a9","title":"Datasets"},{"location":"datasets/#datasets","text":"OpenImages Open Images is a dataset of ~9M images annotated with image-level labels, object bounding boxes, object segmentation masks, visual relationships, and localized narratives. It contains a total of 16M bounding boxes for 600 object classes on 1.9M images, making it the largest existing dataset with object location annotations. The boxes have been largely manually drawn by professional annotators to ensure accuracy and consistency. 1 Open Images 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from falconcv.ds import * if __name__ == '__main__' : # creating dataset dataset = OpenImages ( v = 6 ) #5/6 supported dataset . setup ( split = \"train\" , task = \"detection\" ) #labels = dataset.labels_map.values() # get valid labels images_folder = \"<output folder>\" for batch_images in dataset . fetch ( n = 100 , # number of images by class labels = [ \"Mouse\" , \"dog\" ], # target labels batch_size = 50 # batch images size ): # Do something cool with the images for img in batch_images : # export images to disk img . export ( images_folder ) for region in img . regions : print ( region . shape_attributes [ \"x\" ], region . shape_attributes [ \"y\" ]) Cocos COCO is a large-scale object detection, segmentation, and captioning dataset. COCO has several features: Object segmentation, Recognition in context, Superpixel stuff segmentation, 330K images (>200K labeled) 2 COCO (Common Objects in Context) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from falconcv.ds import * if __name__ == '__main__' : # creating dataset dataset = Coco ( v = 2017 ) #Only 2017 supported dataset . setup ( split = \"train\" , task = \"detection\" ) #labels = dataset.labels_map.values() # get valid labels images_folder = \"<output folder>\" for batch_images in dataset . fetch ( n = 100 , # number of images by class labels = [ \"Mouse\" , \"dog\" ], # target labels batch_size = 50 # batch images size ): # Do something cool with the images for img in batch_images : # export images to disk img . export ( images_folder ) for region in img . regions : print ( region . shape_attributes [ \"x\" ], region . shape_attributes [ \"y\" ]) Scrapper - Using the falconCV scrapper you can download images from bing and flicker Bing Images Scrapper Info How to generate the subscription key? https://azure.microsoft.com/en-us/try/cognitive-services/my-apis/?api=search-api-v7 Download images from bing 1 2 3 4 5 6 7 8 9 10 from falconcv.ds import * import uuid , os import cv2 if __name__ == '__main__' : out_folder = \"<out folder>\" scrapper = BingScrapper ( \"<Subscription Key>\" ) for images_batch in scrapper . fetch ( q = \"cockroach\" , batch_size = 80 ): for img in images_batch : # copy the images to the disk or do whatever you want cv2 . imwrite ( os . path . join ( out_folder , \" {} .jpg\" . format ( str ( uuid . uuid4 ()))), img ) Flickr Images Scrapper Info how to generate the api key?? https://www.flickr.com/services/api/misc.api_keys.html Download images from Flickr 1 2 3 4 5 6 7 8 9 10 from falconcv.ds import * import uuid , os import cv2 if __name__ == '__main__' : out_folder = r \"<out folder>\" scrapper = FlickrScrapper ( api_key = \"<Api Key>\" ) for batch in scrapper . fetch ( q = [ \"cockroach\" ], batch_size = 80 ): for img in batch : # copy the images to the disk or do whatever you want cv2 . imwrite ( os . path . join ( out_folder , \" {} .jpg\" . format ( str ( uuid . uuid4 ()))), img ) https://github.com/openimages/dataset \u21a9 http://cocodataset.org/ \u21a9","title":"Datasets"},{"location":"models/","text":"Models FalconCV offers a interface to work with the models from the Tensorflow object detection API 1 Load a pre-trained model Load Saved model 1 2 3 4 5 6 7 8 from falconcv.models import ModelBuilder from falconcv.util import VIUtil import falconcv as fcv if __name__ == '__main__' : # load saved model with ModelBuilder . build ( \"<path to saved model>\" , \"<path to the labels map>\" ) as model : img , predictions = model . predict ( \"<image path | image uri >\" ) VIUtil . imshow ( img , predictions ) Load Freeze model 1 2 3 4 5 6 7 8 from falconcv.models import ModelBuilder from falconcv.util import VIUtil import falconcv as fcv if __name__ == '__main__' : # load freeze model with ModelBuilder . build ( \"<path to the freeze model *.pb>\" , \"<path to the labels map>\" ) as model : img , predictions = model . predict ( \"< image path | image uri >\" ) VIUtil . imshow ( img , predictions ) Train Custom model Train Custom model 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from falconcv.models import ModelBuilder from falconcv.util import VIUtil import falconcv as fcv if __name__ == '__main__' : config = { \"model\" : model_name , \"images_folder\" : images_folder , \"output_folder\" : out_folder , \"labels_map\" : labels_map , } with ModelBuilder . build ( config = config ) as model : model . train ( epochs = epochs , val_split = 0.3 , clear_folder = False ) # for freezing the model model . freeze ( chekpoint = epochs ) List models zoo 1 2 3 4 5 6 7 8 9 10 11 from falconcv.models.tf import ModelZoo if __name__ == '__main__' : # only faster_rcnn model_zoo = ModelZoo . available_models ( arch = \"faster\" ) for model_name , model_uri in model_zoo . items (): print ( model_name , model_uri ) # print all model_zoo = ModelZoo . available_models () for model_name , model_uri in model_zoo . items (): print ( model_name , model_uri ) https://github.com/tensorflow/models \u21a9","title":"Models"},{"location":"models/#models","text":"FalconCV offers a interface to work with the models from the Tensorflow object detection API 1","title":"Models"},{"location":"models/#load-a-pre-trained-model","text":"Load Saved model 1 2 3 4 5 6 7 8 from falconcv.models import ModelBuilder from falconcv.util import VIUtil import falconcv as fcv if __name__ == '__main__' : # load saved model with ModelBuilder . build ( \"<path to saved model>\" , \"<path to the labels map>\" ) as model : img , predictions = model . predict ( \"<image path | image uri >\" ) VIUtil . imshow ( img , predictions ) Load Freeze model 1 2 3 4 5 6 7 8 from falconcv.models import ModelBuilder from falconcv.util import VIUtil import falconcv as fcv if __name__ == '__main__' : # load freeze model with ModelBuilder . build ( \"<path to the freeze model *.pb>\" , \"<path to the labels map>\" ) as model : img , predictions = model . predict ( \"< image path | image uri >\" ) VIUtil . imshow ( img , predictions )","title":"Load a pre-trained model"},{"location":"models/#train-custom-model","text":"Train Custom model 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from falconcv.models import ModelBuilder from falconcv.util import VIUtil import falconcv as fcv if __name__ == '__main__' : config = { \"model\" : model_name , \"images_folder\" : images_folder , \"output_folder\" : out_folder , \"labels_map\" : labels_map , } with ModelBuilder . build ( config = config ) as model : model . train ( epochs = epochs , val_split = 0.3 , clear_folder = False ) # for freezing the model model . freeze ( chekpoint = epochs ) List models zoo 1 2 3 4 5 6 7 8 9 10 11 from falconcv.models.tf import ModelZoo if __name__ == '__main__' : # only faster_rcnn model_zoo = ModelZoo . available_models ( arch = \"faster\" ) for model_name , model_uri in model_zoo . items (): print ( model_name , model_uri ) # print all model_zoo = ModelZoo . available_models () for model_name , model_uri in model_zoo . items (): print ( model_name , model_uri ) https://github.com/tensorflow/models \u21a9","title":"Train Custom model"}]}